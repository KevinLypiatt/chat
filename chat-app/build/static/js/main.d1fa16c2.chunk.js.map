{"version":3,"sources":["Chat.js","App.js","index.js"],"names":["Chat","messages","setMessages","useState","input","setInput","language","setLanguage","_jsxs","children","value","onChange","e","target","_jsx","map","msg","index","className","user","text","onClick","async","response","axios","post","message","data","handleSpeech","recognition","window","webkitSpeechRecognition","lang","start","onresult","event","transcript","results","onerror","console","error","App","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"4MAiDeA,MA9CFA,KACX,MAAOC,EAAUC,GAAeC,mBAAS,KAClCC,EAAOC,GAAYF,mBAAS,KAC5BG,EAAUC,GAAeJ,mBAAS,MAuBzC,OACEK,eAAA,OAAAC,SAAA,CACED,eAAA,UAAQE,MAAOJ,EAAUK,SAAWC,GAAML,EAAYK,EAAEC,OAAOH,OAAOD,SAAA,CACpEK,cAAA,UAAQJ,MAAM,KAAID,SAAC,WACnBK,cAAA,UAAQJ,MAAM,KAAID,SAAC,eAErBK,cAAA,OAAAL,SACGR,EAASc,KAAI,CAACC,EAAKC,IAClBH,cAAA,OAAiBI,UAAWF,EAAIG,KAAO,eAAiB,cAAcV,SACnEO,EAAII,MADGH,OAKdH,cAAA,SAAOJ,MAAON,EAAOO,SAAWC,GAAMP,EAASO,EAAEC,OAAOH,SACxDI,cAAA,UAAQO,QAnCOC,UACjB,MAAMC,QAAiBC,IAAMC,KAAK,YAAa,CAAEC,QAAStB,EAAOE,aACjEJ,EAAY,IAAID,EAAU,CAAEmB,KAAMhB,EAAOe,MAAM,GAAQ,CAAEC,KAAMG,EAASI,KAAKD,QAASP,MAAM,KAC5Fd,EAAS,GAAG,EAgCkBI,SAAC,SAC7BK,cAAA,UAAQO,QA9BSO,KACnB,MAAMC,EAAc,IAAIC,OAAOC,wBAC/BF,EAAYG,KAAoB,OAAb1B,EAAoB,QAAU,QACjDuB,EAAYI,QAEZJ,EAAYK,SAAYC,IACtB,MAAMC,EAAaD,EAAME,QAAQ,GAAG,GAAGD,WACvC/B,EAAS+B,EAAW,EAGtBP,EAAYS,QAAWH,IACrBI,QAAQC,MAAM,2BAA4BL,EAAMK,MAAM,CACvD,EAkB+B/B,SAAC,mBAC3B,EClCKgC,MARf,WACE,OACE3B,cAAA,OAAKI,UAAU,MAAKT,SAClBK,cAACd,EAAI,KAGX,ECJA0C,IAASC,OACP7B,cAAC8B,IAAMC,WAAU,CAAApC,SACfK,cAAC2B,EAAG,MAENK,SAASC,eAAe,Q","file":"static/js/main.d1fa16c2.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nconst Chat = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [language, setLanguage] = useState('fr');\n\n  const handleSend = async () => {\n    const response = await axios.post('/api/chat', { message: input, language });\n    setMessages([...messages, { text: input, user: true }, { text: response.data.message, user: false }]);\n    setInput('');\n  };\n\n  const handleSpeech = () => {\n    const recognition = new window.webkitSpeechRecognition();\n    recognition.lang = language === 'fr' ? 'fr-FR' : 'en-US';\n    recognition.start();\n\n    recognition.onresult = (event) => {\n      const transcript = event.results[0][0].transcript;\n      setInput(transcript);\n    };\n\n    recognition.onerror = (event) => {\n      console.error('Speech recognition error', event.error);\n    };\n  };\n\n  return (\n    <div>\n      <select value={language} onChange={(e) => setLanguage(e.target.value)}>\n        <option value=\"fr\">French</option>\n        <option value=\"en\">English</option>\n      </select>\n      <div>\n        {messages.map((msg, index) => (\n          <div key={index} className={msg.user ? 'user-message' : 'bot-message'}>\n            {msg.text}\n          </div>\n        ))}\n      </div>\n      <input value={input} onChange={(e) => setInput(e.target.value)} />\n      <button onClick={handleSend}>Send</button>\n      <button onClick={handleSpeech}>ðŸŽ¤</button>\n    </div>\n  );\n};\n\nexport default Chat;\n","import React from 'react';\nimport Chat from './Chat';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Chat />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}